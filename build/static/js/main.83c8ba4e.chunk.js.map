{"version":3,"sources":["logo.svg","config.js","pages/landing.jsx","pages/favorites.jsx","comonents/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","endpointUrl","LandingPage","React","useState","cityConditions","setCityConditions","useEffect","fetch","process","then","res","json","data","catch","err","console","log","Fragment","JSON","stringify","FavoritesPage","Navbar","href","App","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mLAAAA,EAAOC,QAAU,IAA0B,kC,4ICCvCC,G,MAAc,IAQhBA,EAAW,qCCNb,IAmBeC,EAnBK,WAClB,IADwB,EAEoBC,IAAMC,SAAS,IAFnC,mBAEjBC,EAFiB,KAEDC,EAFC,KAWxB,OAPAH,IAAMI,WAAU,WACdC,MAAM,GAAD,OAAIP,EAAJ,iCAJO,SAIP,mBDLMQ,qCCMRC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIP,EAAkBO,EAAK,OACpCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC3B,IACHC,QAAQC,IAAIZ,GAEV,kBAAC,IAAMa,SAAP,KACE,2CACA,2BAAIC,KAAKC,UAAUf,MCTVgB,EANO,WAClB,OAAO,kBAAC,IAAMH,SAAP,KACH,+CCOOI,EATA,WACb,OACE,6BACE,uBAAGC,KAAK,KAAR,QACA,uBAAGA,KAAK,cAAR,eCeSC,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1B,IACjC,kBAAC,IAAD,CAAOyB,KAAK,aAAaC,UAAWP,QCF1BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.83c8ba4e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import dotenv from \"dotenv\";\nlet endpointUrl = \"\";\nconst port = 4000;\nconst apikey = process.env.REACT_APP_APIKEY;\n\nif (process.env.NODE_ENV === \"development\") {\n  endpointUrl = `http://localhost:${port}`;\n}\nif (process.env.NODE_ENV === \"production\") {\n  endpointUrl = `http://dataservice.accuweather.com`;\n}\n\nexport { endpointUrl, apikey };\n","import React from \"react\";\nimport { endpointUrl, apikey } from \"../config\";\n\nconst LandingPage = () => {\n  let cityKey = \"215854\";\n  const [cityConditions, setCityConditions] = React.useState({});\n\n  React.useEffect(() => {\n    fetch(`${endpointUrl}/currentconditions/v1/${cityKey}?apikey=${apikey}`)\n      .then(res => res.json())\n      .then(data => setCityConditions(data[0]))\n      .catch(err => console.log(err));\n  }, []);\n  console.log(cityConditions);\n  return (\n    <React.Fragment>\n      <h1>LandingPage</h1>\n      <p>{JSON.stringify(cityConditions)}</p>\n    </React.Fragment>\n  );\n};\n\nexport default LandingPage;\n","import React from \"react\"\n\nconst FavoritesPage = ()=>{\n    return <React.Fragment>\n        <h1>FavoritesPage</h1>\n    </React.Fragment>\n}\n\nexport default FavoritesPage;","import React from \"react\";\n\nconst Navbar = () => {\n  return (\n    <div>\n      <a href=\"/\">home</a>\n      <a href=\"/favorites\">favorites</a>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\nimport LandingPage from \"./pages/landing\";\nimport FavoritesPage from \"./pages/favorites\";\nimport Navbar from \"./comonents/navbar\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={LandingPage} />\n          <Route path=\"/favorites\" component={FavoritesPage} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}